# Copyright (C) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
  import("//foundation/communication/dhcp/dhcp_lite.gni")
  import("//foundation/communication/wifi/wifi/wifi_lite.gni")
} else {
  import("//build/ohos.gni")
  import("//foundation/communication/dhcp/dhcp.gni")
  import("//foundation/communication/wifi/wifi/wifi.gni")
}

local_base_sources = [
  "$WIFI_ROOT_DIR/frameworks/native/src/wifi_p2p_msg.cpp",
  "config/wifi_config_file_spec.cpp",
  "config/wifi_settings.cpp",
  "log/log_helper.c",
  "net_helper/arp_checker.cpp",
  "net_helper/base_address.cpp",
  "net_helper/dhcpd_interface.cpp",
  "net_helper/http_request.cpp",
  "net_helper/if_config.cpp",
  "net_helper/ip_tools.cpp",
  "net_helper/ipv4_address.cpp",
  "net_helper/ipv6_address.cpp",
  "net_helper/mac_address.cpp",
  "net_helper/network_interface.cpp",
  "net_helper/raw_socket.cpp",
  "utils/wifi_common_event_helper.cpp",
  "utils/wifi_encryption_util.cpp",
  "utils/wifi_global_func.cpp",
]

local_base_include_dirs = [
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/include",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/log",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/net_helper",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/utils",
  "$WIFI_ROOT_DIR/services/wifi_standard/wifi_framework/wifi_toolkit/config",
  "//commonlibrary/c_utils/base/include",
  "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
  "$WIFI_ROOT_DIR/frameworks/native/interfaces",
  "$DHCP_ROOT_DIR/interfaces/inner_api/interfaces",
  "$DHCP_ROOT_DIR/interfaces/inner_api/include",
  "$DHCP_ROOT_DIR/services/mgr_service/include",
  "//foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
  "$WIFI_ROOT_DIR/services/wifi_standard/include",
]

if (defined(ohos_lite)) {
  shared_library("wifi_toolkit") {
    sources = local_base_sources
    include_dirs = local_base_include_dirs

    deps = [
      "$DHCP_ROOT_DIR/services/mgr_service:dhcp_manager_service",
      "//base/hiviewdfx/hilog_lite/frameworks/featured:hilog_shared",
    ]

    defines = [
      "OHOS_ARCH_LITE",
      "AP_INSTANCE_MAX_NUM=$wifi_feature_with_ap_num",
    ]

    configs -= [ "//build/lite/config:language_cpp" ]
    cflags_cc = [
      "-std=c++17",
      "-fno-rtti",
    ]
    ldflags = [
      "-fPIC",
      "-Wl,-E",
    ]
  }
} else {
  ohos_shared_library("wifi_toolkit") {
    sanitize = {
      cfi = true
      boundary_sanitize = true
      cfi_cross_dso = true
    }
    install_enable = true
    sources = local_base_sources
    sources += [ "utils/wifi_cert_utils.cpp" ]

    include_dirs = local_base_include_dirs
    include_dirs += [
      "//base/security/certificate_manager/frameworks/cert_manager_standard/main/common/include",
      "//base/security/certificate_manager/interfaces/innerkits/cert_manager_standard/main/include",
    ]

    deps = [
      "$DHCP_ROOT_DIR/services/mgr_service:dhcp_manager_service",
      "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
      "//base/security/certificate_manager/interfaces/innerkits/cert_manager_standard/main:cert_manager_sdk",
    ]

    defines = [ "AP_INSTANCE_MAX_NUM=$wifi_feature_with_ap_num" ]
    if (wifi_feature_with_encryption) {
      defines += [ "FEATURE_ENCRYPTION_SUPPORT" ]
    }

    external_deps = [
      "ability_base:want",
      "c_utils:utils",
      "common_event_service:cesfwk_innerkits",
      "eventhandler:libeventhandler",
      "huks:libhukssdk",
    ]
    if (wifi_feature_with_encryption) {
      external_deps += [ "huks:libhukssdk" ]
    }
    cflags_cc = [
      "-std=c++17",
      "-fno-rtti",
    ]

    ldflags = [
      "-fPIC",
      "-Wl,-E",
    ]

    part_name = "wifi"
    subsystem_name = "communication"
  }
}
